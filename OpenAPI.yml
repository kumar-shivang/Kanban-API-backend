# This is a sample OpenAPI 3.0.2 specification.
# It is used to test the OpenAPI 3.0.2 parser.


openapi: '3.0.2'
info:
  title: Kanban API
  version: '1.0'
servers:
  - url: http://127.0.0.1:5000
    description: Local server
tags:
  - name: User
    description: Operations on users
  - name: List
    description: Operations on lists
  - name: Card
    description: Operations on cards
paths:
  /auth/login:
    post:
      tags:
        - User
      summary: Login user
      description: Login a user with a username and password to get a access token
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: user1
                password:
                  type: string
                  format: password
                  example: password@123
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Login successful"
                  access_token:
                    type: string
                    example: "eyJhbGciOiafldjflajf"

        '401':
          description: Invalid username/password supplied
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid password"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User not found"
  /user:
    get:
      tags:
        - User
      summary: Get user by access token
      description: Returns a single user
      operationId: get_user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                access_token:
                  type: string
                  example: "eyJhbGciOdajfgfdlajf"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User not found"
    post:
      tags:
        - User
      summary: Create user
      description: Create a new user with a username and password
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: user1
                password:
                  type: string
                  format: password
                  example: password@123
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User created successfully"
        '400':
          description: User already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User already exists"
    delete:
      tags:
        - User
      summary: Delete user
      description: Delete a user by access_token and password
      operationId: delete_user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                access_token:
                  type: string
                  example: "eyJhbGciOdajfldkjfl"
                password:
                  type: string
                  format: password
                  example: "********"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User deleted successfully"
        '401':
          description: "Invalid Password"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid Password"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User not found"
    put:
      tags:
        - User
      summary: Update user
      description: Update a user by access_token
      operationId: update_user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                access_token:
                  type: string
                  example: "eyJhbGciOd"
                newUsername:
                  type: string
                  example: user1
                newEmail:
                  type: string
                  example: user1@kanban.com


      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User updated successfully"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User not found"
  
  /list:
    get:
      tags:
        - List
      summary: Get list by listID and access_token
      description: Returns a single list
      operationId: get_list
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                listID:
                  type: integer
                  format: int64
                  example: 0
                access_token:
                  type: string
                  example: "eyJhbGciOdajfldkjfl"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
        '401':
          description: Invalid access_token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
        '404':
          description: List not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "List not found"
    post:
      tags:
        - List
      summary: Create list
      description: Create a new list with a title and access_token
      operationId: createList
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "List 1"
                access_token:
                  type: string
                  example: "eyJhbGciOdajfgfdlajf"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type:
                  object
                properties:
                  message:
                    type: string
                    example: "List created successfully"
        '400':
          description: List with same title already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "List already exists"

    delete:
      tags:
        - List
      summary: Delete list
      description: Delete a list by listID and access_token
      operationId: deleteList
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                listID:
                  type: integer
                  format: int64
                  example: 0
                access_token:
                  type: string
                  example: "eyJhbGciOdajfgfdlajf"
      responses:

        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "List deleted successfully"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
        '404':
          description: List not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "List not found"
    put:
      tags:
        - List
      summary: Update list
      description: Update a list by listID and access_token
      operationId: updateList
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                listID:
                  type: integer
                  format: int64
                  example: 0
                new_title:
                  type: string
                  example: "List 1"
                access_token:
                  type: string
                  example: "eyJhbGciOdajfgfdlajf"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "List updated successfully"
        '400':
          description: List with same title already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "List with same title already exists"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
        '404':
          description: List not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "List not found"
      
  /list/movecards:
    patch:
      tags:
        - List
      summary: Move cards between lists
      description: Move all cards between lists by listID and access_token
      operationId: moveCards
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                listID:
                  type: integer
                  format: int64
                  example: 0
                access_token:
                  type: string
                  example: "eyJhbGciOdajfgfdlajf"
                new_listID:
                  type: integer
                  format: int64
                  example: 0
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cards moved successfully"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
        '404':
          description: List not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "List not found"
                

  /card:
    get:
      tags:
        - Card
      summary: Get card by cardID and access_token
      description: Returns a single card
      operationId: get_card
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                cardID:
                  type: integer
                  format: int64
                  example: 0
                access_token:
                  type: string
                  example: "eyJhbGciOdajfgfdlajf"
                
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
        '404':
          description: Card not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Card not found"
    post:
      tags:
        - Card
      summary: Create card
      description: Create a new card with a title
      operationId: createCard
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                access_token:
                  type: string
                  example: "eyJhbGciOdajfgfdlajf"
                title:
                  type: string
                  example: "Card 1"
                content:
                  type: string
                  example: "Card content"
                listID:
                  type: integer
                  format: int64
                  example: 0
                deadline:
                  type: string
                  format: date
                  example: "2020-12-31"
                userID:
                  type: integer
                  format: int64
                  example: 0
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Card created successfully"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
        '404':
          description: List not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "List not found"
    delete:
      tags:
        - Card
      summary: Delete card
      description: Delete a card by cardID and access_token
      operationId: delete_card
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                access_token:
                  type: string
                  example: "eyJhbGciOdajfgfdlajf"
                cardID:
                  type: integer
                  format: int64
                  example: 0
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Card deleted"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
        '404':
          description: Card not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Card not found"
    put:
      tags:
        - Card
      summary: Update card 
      description: Update a card by cardID and access_token 
      operationId: update_card
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                access_token:
                  type: string
                  example: "eyJhbGciOdajfgfdlajf"
                cardID:
                  type: integer
                  format: int64
                  example: 0
                new_title:
                  type: string
                  example: "New title"
                new_content:
                  type: string
                  example: "New Card content"
                new_deadline:
                  type: integer
                  format: timestamp
                  example: 000000000000
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Card updated successfully"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
        '404':
          description: Card not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Card not found"
  /card/move:
    put:
      tags:
        - Card
      summary: Move card
      description: Move a card to a new list by cardID and access_token
      operationId: moveCard
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                access_token:
                  type: string
                  example: "eyJhbGciOdajfgfdlajf"
                cardID:
                  type: integer
                  format: int64
                  example: 0
                new_listID:
                  type: integer
                  format: int64
                  example: 0
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Card moved successfully"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
        '404':
          description: Card not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Card not found"
        '409':
          description: List not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "List not found"
  /card/markComplete:
    patch:
      tags:
        - Card
      summary: Mark card as complete
      description: Mark a card as complete by cardID and access_token
      operationId: markCardComplete
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                access_token:
                  type: string
                  example: "eyJhbGciOdajfgfdlajf"
                cardID:
                  type: integer
                  format: int64
                  example: 0
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Card marked as complete"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
        '404':
          description: Card not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Card not found"
  /card/markIncomplete:
    patch:
      tags:
        - Card
      summary: Mark card as incomplete
      description: Mark a card as incomplete by cardID and access_token
      operationId: markCardIncomplete
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                access_token:
                  type: string
                  example: "eyJhbGciOdajfgfdlajf"
                cardID:
                  type: integer
                  format: int64
                  example: 0
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Card marked as incomplete"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
        '404':
          description: Card not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Card not found"


  /export/card/<int:cardID>:
    get:
      tags:
        - Export
      summary: Export card
      description: Export a card by cardID
      operationId: exportCard
      parameters:
        - name: cardID
          in: path
          description: ID of card to return
          required: true
          schema:
            type: integer
            format: int64
            example: 0
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Exporting card as CSV"
                  taskID:
                    type: string
                    example: "0agfd-agaedf-gadfa"
        '404':
          description: Card not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "card not found"
  /export/list/<int:listID>:
    get:
      tags:
        - Export
      summary: Export list
      description: Export a list by listID
      operationId: exportList
      parameters:
        - name: listID
          in: path
          description: ID of list to return
          required: true
          schema:
            type: integer
            format: int64
            example: 0
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Exporting list as CSV"
                  taskID:
                    type: string
                    example: "0agfd-agaedf-gadfa"
        '404':
          description: List not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "list not found"
  /export/status:
    post:
      tags:
        - Export
      summary: Get export status
      description: Get the status of an export task by taskID
      operationId: getExportStatus
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                taskID:
                  type: string
                  example: "0agfd-agaedf-gadfa"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  taskID:
                    type: string
                    example: "0agfd-agaedf-gadfa"
                  status:
                    type: string
                    example: "PENDING"
  /export/download/card/<int:cardID>:
    get:
      tags:
        - Export
      summary: Download card
      description: Download a card by cardID
      operationId: downloadCard
      parameters:
        - name: cardID
          in: path
          description: ID of card to return
          required: true
          schema:
            type: integer
            format: int64
            example: 0
      responses:
        '200':
          description: Successful operation
        '404':
          description: Card not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "card not found"
  /export/download/list/<int:listID>:
    get:
      tags:
        - Export
      summary: Download list
      description: Download a list by listID
      operationId: downloadList
      parameters:
        - name: listID
          in: path
          description: ID of list to return
          required: true
          schema:
            type: integer
            format: int64
            example: 0
      responses:
        '200':
          description: Successful operation
        '404':
          description: List not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "list not found"    




components:
  schemas:
    User:
      type: object
      properties:
        userID:
          type: integer
          format: int64
          example: 0
        username:
          type: string
          example: user1
        email:
          type: string
          format: email
          example: user@kanban.com
        password_hash:
          type: string
          format: password
          example: "********"
        userLists:
          type: array
          items:
            $ref: '#/components/schemas/List'
        userCards:
          type: array
          items:
            $ref: '#/components/schemas/Card'
    List:
      type: object
      properties:
        listID:
          type: integer
          format: int64
          example: 0
        title:
          type: string
          example: "List 1"
        userID :
          type: integer
          format: int64
          example: 0
        listCards:
          type: array
          items:
            $ref: '#/components/schemas/Card'
    Card:
      type: object
      properties:
        cardID:
          type: integer
          format: int64
          example: 0
        cardName:
          type: string
          example: "Card 1"
        content:
          type: string
          example: "This is a card"
        lastEdited:
          type: integer
          example: 0000000000
        completionDate:
          type: integer
          example: 0000000000
        isComplete:
          type: boolean
          example: false
        deadline:
          type: integer
          example: 0000000000
        creationTime:
          type: integer
          example: 0000000000
        listID:
          type: integer
          format: int64
          example: 0
        userID:
          type: integer
          format: int64
          example: 0
