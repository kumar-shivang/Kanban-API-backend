# This file contains the User class. It is used to represent a user in the database.
from __init__ import db # Import the database object from the __init__.py file in the database folder.
from werkzeug.security import generate_password_hash, check_password_hash

# The User class is a model that represents a user in the database. It has 4 fields : userID, username, email and a password hash generated by werzukrg security
class User(db.Model):
    __tablename__ = 'user'  # This name will be used to refer to the table in the database for relationships.
    userID = db.Column(db.Integer, primary_key=True)  # userID is the primary key for user table.
    username = db.Column(db.String(30), unique=True)  # username is unique
    password_hash = db.Column(db.String(
        128))  # password hash is 128 characters long because it is generated by the werkzeug security module that returns a 128 character hash
    email = db.Column(db.String(50, nullable=True),
                      unique=True)  # email is unique. It has 50 characters because it is a optimum number of characters for an email address.
    userLists = db.relationship('List', backref='user',
                                lazy='dynamic')  # userLists is a relationship field that references the List class. It is used to get all the lists for a user.
    userCards = db.relationship('Card', backref='user',
                                lazy='dynamic')  # userCards is a relationship field that references the Card class. It is used to get all the cards for a user.

    # The __repr__ method is used to print the object. It prints the username of the user
    def __repr__(self):
        return '<userID %r username %s >' % self.userID % self.username

        # The generate password hash method generates a password hash from a password using the werkzeug security module.

    def generate_password_hash(self, password):
        self.password_hash = generate_password_hash(password)

    # The check password method checks if a password is correct by checking the hash. Again, this method is provided by the werkzeug security module.
    def check_password(self, password):
        return check_password_hash(self.password_hash, password)

    # The password property is a way to make the password field read-only. It is used like a normal field, but it actually calls the generate_password_hash method.
    @property
    def password(self):
        raise AttributeError('password is not a readable attribute')

    # The __init__ method is the class constructor for the User class. It takes a username and password as parameters, and sets the username and password fields.
    def __init__(self, username, password, email=None):
        self.username = username
        self.password_hash = generate_password_hash(password)
        self.email = email